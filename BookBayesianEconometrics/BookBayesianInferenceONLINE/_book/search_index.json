[["Chap5.html", "Chapter 5 Graphical user interface", " Chapter 5 Graphical user interface This chapter presents our graphical user interface (GUI) to carry out Bayesian regression analysis in a very friendly environment without any programming skills (drag and drop). Our GUI is based on an interactive web application using shiny (Chang 2018), and packages like MCMCpack (Martin, Quinn, and Park 2018) and bayesm (Rossi 2017) from R software (R Core Team 2023), and is designed for teaching and applied purposes at an introductory level. In the next chapters of the second part of this book, we carry out some applications to highlight the potential of our GUI for applied researchers and practitioners. References "],["secGUI1.html", "5.1 Introduction", " 5.1 Introduction Our GUI allows performing inference using Bayesian regression analysis without requiring programming skills. The latter seems to be a significant impediment to increasing the use of the Bayesian framework (Woodward 2005; Karabatsos 2016). There are other available graphical user interfaces for carrying out Bayesian regression analysis. ShinyStan (Stan Development Team 2017) is a very flexible open source program, but users are required to have some programming skills. This is based on Stan software for Bayesian data analysis (Carpenter et al. 2017). BugsXLA (Woodward 2005) is open source, but less flexible. However, users do not need to have programming skills. Bayesian regression: Nonparametric and parametric models (Karabatsos 2016) is a very flexible and friendly GUI that is based on MATLAB Compiler for a 64-bit Windows computer. Its focus is on Bayesian nonparametric regressions, and it can be thought of for users who have mastered basic parametric models, such as the ones that we show in our GUI. There are also MATLAB toolkit, Stata and BayES, but these are not open sources. We developed our GUI based on an interactive web application using shiny (Chang 2018), and some libraries in R (R Core Team 2023). The specific libraries and commands that are used in our GUI can be seen in the Appendix. It has ten univariate models, four multivariate, four time series models, three hierarchical longitudinal, and seven Bayesian model averaging frameworks. In addition, it gives basic summaries and diagnostics of the posterior chains, as well as the posterior chains themselves, and different plots, such as trace, autocorrelation and densities. In terms of its flexibility and possibilities, our GUI lies between ShinyStan and BugsXLA: users are not required to have any programming skills, but it is not as advanced as Karabatsos (2016)’s software. However, our GUI can be run in any operating system. Our GUI, which we call BEsmarter,1 is freely available at https://github.com/besmarter/BSTApp; so users have access to all our code and datasets. Simulated and applied datasets are in the folders DataSim, and DataApp of our GitHub repository (see tables in the Appendix for details). The former folder also includes the files that were used to simulate different processes, so, the population parameters are available, and as a consequence these files can be used as a pedagogical tool to show some statistical properties of the inferential frameworks available in our GUI. The latter folder contains the datasets used in this book. Users should use these datasets as templates to structure their own datasets. There are three ways to install our GUI. The easiest way, but that requires installation of R and potentially a R code editor, is to type shiny::runGitHub(\"besmarter/BSTApp\", launch.browser=T) in the R console or any R code editor and execute it. The second option is to visit https://posit.cloud/content/4328505, log in or sign up for Posit Cloud, and access the project titled GUIded Bayesian regression app BSTApp. In the right-bottom window, click on the BSTApp-master folder under Files, open the app.R file, and finally, click the Run App button. However, long inactivity will cause the window to close. The third approach, and our recommendation, is using a Docker image by running: docker pull magralo95/besmartergui:latest docker run –rm -p 3838:3838 magralo95/besmartergui in your Command Prompt. This creates an isolated environment for our GUI, ensuring consistent performance across systems. Note that Docker must be installed to deploy our GUI this way. Then users can access the app going to 127.0.0.1:3838 or http://localhost:3838/. After implementing any of the three ways to run our GUI, users can see a new window where a presentation of our research team is displayed (see Figure 5.1). In addition, the top panel in Figure 5.1 shows the class of models that can be estimated in our GUI. Figure 5.1: Display of graphical user interface. References "],["secGUI2.html", "5.2 Univariate models", " 5.2 Univariate models After our GUI is deployed (see Figure 5.1), the user should select Univariate Models in the top panel. Then, the Figure 5.2 is displayed, and the user can see the radio button on the left hand side that shows the specific models inside this generic class. In particular, users can see that the normal model is selected from inside the class of univariate models. Figure 5.2: Univariate models: Specification. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
