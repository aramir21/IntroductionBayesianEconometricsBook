if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setTxtProgressBar(pb, i)
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- txtProgressBar(min = 0, max = tot, style = 3)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setTxtProgressBar(pb, i)
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- txtProgressBar(min = 0, max = tot, style = 3)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setTxtProgressBar(pb, it)
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setTkProgressBar(pb, it, label=paste(round(i/total*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
tcltk::setTkProgressBar(pb, it, label=paste(round(i/total*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setTkProgressBar(pb, it, label=paste(round(i/total*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
library(tcltk)
install.packages("tcltk")
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- tcltk::tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setTkProgressBar(pb, it, label=paste(round(i/total*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- winProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setWinProgressBar(pb, it, title=paste( round(i/total*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- winProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setWinProgressBar(pb, it, title=paste( round(i/tot*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- winProgressBar(title = "progress bar", min = 0,
max = tot, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setWinProgressBar(pb, it, title=paste( round(i/tot*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X)
K <- dim(Xm)[2]
BETAS <- matrix(0, iter + burnin, K)
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit"))
BETA <- Reg$coefficients
tot <- iter + burnin
COV <- vcov(Reg)
COVt <- tau^2*solve(solve(B0) + solve(COV))
Accep <- rep(0, tot)
# create progress bar
pb <- winProgressBar(title = "progress bar", min = 0,
max = tot, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt)
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Likelihood for the reference
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Prior for reference
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA = BETAc
Accep[it] <- 1
} # Changing reference for candidate if selected
BETAS[it, ] <- BETA #Saving candidate if selected
setWinProgressBar(pb, it, title=paste( round(it/tot*100, 0),
"% done"))
}
close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
Posterior$Bs
Posterior$AceptRate
library(knitrProgressBar)
install.packages("knitrProgressBar")
warnings()
set.seed(010101) # Set a seed for replicability of results
N <- 10000 # Sample size
B <- c(0.5, 0.8, -1.2) # Population location parameters
x2 <- rnorm(N) # Regressor
x3 <- rnorm(N) # Regressor
X <- cbind(1, x2, x3) # Regressors
XB <- X%*%B
PY <- exp(XB)/(1 + exp(XB)) # Probability of Y = 1
Y <- rbinom(N, 1, PY) # Draw Y's
table(Y) # Frequency
###### 1. Programming the M-H sampler #######
# This function sets the M-H sampler using as default a hyperparameter mean equal to 0 and a covariance equal to 1000 times a identity matrix, a tunning parameter equal to 1, 1000 post burn-in iterations, and the latter is equal to 500.
MHfunc <- function(y, X, b0 = rep(0, dim(X)[2] + 1), B0 = 1000*diag(dim(X)[2] + 1), tau = 1, iter = 1000, burnin = 500){
Xm <- cbind(1, X) # regressors
K <- dim(Xm)[2] # Number of location parameters
BETAS <- matrix(0, iter + burnin, K) # Space for posterior chains
Reg <- glm(y ~ Xm - 1, family = binomial(link = "logit")) # Maximum likelihood estimation
BETA <- Reg$coefficients # Maximum likelihood parameter estimates
tot <- iter + burnin # Total iterations M-H algorithm
COV <- vcov(Reg) # Maximum likelihood covariance matrix
COVt <- tau^2*solve(solve(B0) + solve(COV)) # Covariance matrix for the proposal distribution
Accep <- rep(0, tot) # Space for calculating the acceptance rate
# create progress bar
# pb <- winProgressBar(title = "progress bar", min = 0,
#                      max = tot, width = 300)
for(it in 1:tot){
BETAc <- BETA + MASS::mvrnorm(n = 1, mu = rep(0, K), Sigma = COVt) # Candidate location parameter
likecand <- sum((Xm%*%BETAc) * Y - apply(Xm%*%BETAc, 1, function(x) log(1 + exp(x)))) # Log likelihood for the candidate
likepast <- sum((Xm%*%BETA) * Y - apply((Xm%*%BETA), 1, function(x) log(1 + exp(x)))) # Log lkelihood for the actual draw
priorcand <- (-1/2)*crossprod((BETAc - b0), solve(B0))%*%(BETAc - b0) # Log prior for candidate
priorpast <- (-1/2)*crossprod((BETA - b0), solve(B0))%*%(BETA - b0) # Log prior for actual draw
alpha <- min(1, exp(likecand + priorcand - likepast - priorpast)) #Probability of selecting candidate
u <- runif(1) # Decision rule for selecting candidate
if(u < alpha){
BETA <- BETAc # Changing reference for candidate if selected
Accep[it] <- 1 # Indicator if the candidate is accepted
}
BETAS[it, ] <- BETA # Saving draws
# setWinProgressBar(pb, it, title=paste( round(it/tot*100, 0),
#                                       "% done"))
}
# close(pb)
return(list(Bs = BETAS[-c(1:burnin), ], AceptRate = mean(Accep)))
}
Posterior <- MHfunc(y = Y, X = cbind(x2, x3))
paste("Acceptance rate equal to", " ", Posterior$AceptRate)
summary(coda::mcmc(Posterior$Bs)) # Summary of the posterior draws.
###### 2. Using a library: MCMCpack #######
RegLog <- MCMClogit::MCMCregress(y~X-1, burnin = 500, mcmc = 1000, b0 = rep(0, 3), B0 = 1000^(-1)*diag(3), tune = 1, thin = 1)
summary(RegLog)
###### 2. Using a library: MCMCpack #######
RegLog <- MCMC::MCMClogit(y~X-1, burnin = 500, mcmc = 1000, b0 = rep(0, 3), B0 = 1000^(-1)*diag(3), tune = 1, thin = 1)
###### 2. Using a library: MCMCpack #######
RegLog <- MCMCpack::MCMClogit(y~X-1, burnin = 500, mcmc = 1000, b0 = rep(0, 3), B0 = 1000^(-1)*diag(3), tune = 1, thin = 1)
###### 2. Using a library: MCMCpack #######
RegLog <- MCMCpack::MCMClogit(Y~X-1, burnin = 500, mcmc = 1000, b0 = rep(0, 3), B0 = 1000^(-1)*diag(3), tune = 1, thin = 1)
summary(RegLog)
summary(coda::mcmc(Posterior$Bs)) # Summary of the posterior draws.
library(svglite)
knitr::opts_chunck$set(echo = FALSE,
dev = "svglite",
fig.ext = ".svg"
)
paste("Acceptance rate equal to", Posterior$AceptRate, sep = " ")
PostPar <- coda::mcmc(Posterior$Bs)
summary(PostPar) # Summary of the posterior draws.
# Trace and density plots
plot(PostPar)
# Autocorrelation plots
coda::autocorr.plot(PostPar)
# Convergence diagnostics
coda::geweke.diag(PostPar)
coda::raftery.diag(PostPar,q=0.5,r=0.025,s = 0.95)
coda::heidel.diag(PostPar)
warnings()
warnings()
str(knitr::opts_chunk$get())
write.csv(cbind(Y, x2, x3), file = "DataSimulations/LogitSim.csv", sep = ",") # Export data
write.csv(cbind(Y, x2, x3), file = "DataSimulations/LogitSim.csv") # Export data
mydata <- read.csv("DataApplications/2HealthMed.csv", header = T, sep = ",")
attach(mydata)
str(mydata)
View(mydata)
b0 <- rep(0, 10)
K <- 10
b0 <- rep(0, K)
B0 <- 1000^(-1)*diag(K)
y <- Hosp
X <- cbind(SHI, Female, Age, Age2, Est2, Est3, Fair, Good, Excellent)
data <- list(y, X)
Data <- list(y, X)
B0i <- 1000^(-1)*diag(K)
Prior <- list(b0, B0i)
y <- Hosp
X <- cbind(SHI, Female, Age, Age2, Est2, Est3, Fair, Good, Excellent)
Data <- list(y, X)
Mcmc <- list(R = 10000, nprint = 0)
RegProb <- bayesm::rbprobitGibbs(Data = Data, Prior = Prior, Mcmc = Mcmc)
Data <- list(y = y, X = X)
Mcmc <- list(R = 10000, nprint = 0)
RegProb <- bayesm::rbprobitGibbs(Data = Data, Prior = Prior, Mcmc = Mcmc)
summary(RegProb$betadraw)
head(X)
PostPar <- RegProb$betadraw
head(X)
colnames(PostPar) <- c("Cte", names(X))
names(X)
head(X)
names(X)
colnames(PostPar) <- c("Cte", "SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
c("Cte", "SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
colnames(PostPar) <- c(SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
summary(PostPar)
colnames(PostPar) <- c("SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
summary(PostPar)
PostPar <- RegProb$betadraw
colnames(PostPar) <- c("SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
summary(PostPar)
PostPar <- coda::mcmc(RegProb$betadraw)
colnames(PostPar) <- c("SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
summary(PostPar)
B0i <- diag(K)
Prior <- list(b0, B0i)
y <- Hosp
X <- cbind(1, SHI, Female, Age, Age2, Est2, Est3, Fair, Good, Excellent)
Data <- list(y = y, X = X)
Mcmc <- list(R = 10000, nprint = 0)
RegProb <- bayesm::rbprobitGibbs(Data = Data, Prior = Prior, Mcmc = Mcmc)
PostPar <- coda::mcmc(RegProb$betadraw)
colnames(PostPar) <- c("Cte", "SHI", "Female", "Age", "Age2", "Est2",
"Est3", "Fair", "Good", "Excellent")
summary(PostPar)
install.packages("bookdown")
install.packages("svglite")
set.seed(12345)
MD<-1000  #Dataset Size
B<-c(0.5,0.8,-3)
B1<-c(-2.5,-3.5,0)
B2<-c(1,1,0)
set.seed(12345)
X1<-matrix(cbind(rnorm(MD,0,1),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
X2<-matrix(cbind(rnorm(MD,0,1),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
X3<-matrix(cbind(rnorm(MD,0,1),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
X4<-matrix(rnorm(MD,1,1),MD,1)
V1<-B2[1]+X1%*%B+B1[1]*X4
V2<-B2[2]+X2%*%B+B1[2]*X4
V3<-B2[3]+X3%*%B+B1[3]*X4
suma<-exp(V1)+exp(V2)+exp(V3)
p1<-exp(V1)/suma
p2<-exp(V2)/suma
p3<-exp(V3)/suma
p<-cbind(p1,p2,p3)
y<- apply(p,1, function(x)sample(1:3, 1, prob = x, replace = TRUE))
table(y)
library(mlogit)
mode<-as.factor(y)
dat<-data.frame(mode,X1[,1],X2[,1],X3[,1],X1[,2],X2[,2],X3[,2],X1[,3],X2[,3],X3[,3],X4)
colnames(dat)<-c("mode","V1.1","V1.2","V1.3","V2.1","V2.2","V2.3","V3.1","V3.2","V3.3","V4")
attach(dat)
Exper<- mlogit.data(dat, shape = "wide", varying=2:10, choice = "mode")
res.mlogit<- mlogit(mode ~ V1 + V2 + V3 | V4, data=Exper, reflevel="3", probit=FALSE)
summary(res.mlogit)
